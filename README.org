#+title: README

* How to start

** prepare
- docker
- blender 4.2 and bvtknodes, 参照 [[https://github.com/2025-simulation/bvtknode][这个文章]] 安装 BVTKNodes 插件
- ollama。拉取两个大模型 llama3:latest, nomic-embed-text
  #+begin_src sh
    ollama pull llama3:latest nomic-embed-text
  #+end_src

** procedure
*** 部署项目
#+begin_src sh
  git clone --recursive this repo
  cd final-docker
  docker compose up -d
#+end_src

open-webui 的网址可以在 [[http://localhost:8080]] 访问

*** blender 插件安装

安装 [[file:connect/docker-version/bvtk-json-autoload.py][这个插件]] 之前，需要先根据项目部署的路径调整函数,
将下面的变量修改为相应的项目部署的实际地址。（Windows 的项目地址可能需要使用 \\ 作为路径分隔符）
#+begin_src python
  PROJECT_ROOT = os.path.expanduser("~/Developments/simulation/connect")
#+end_src

参照上面的教程在 blender 安装。

*** open-webui functions 设置
如下在 open-webui 中添加需要的函数。
[[file:statics/add-function-1.png]]
[[file:statics/add-function-2.png]]
选择[[file:connect/docker-version/open-webui-functions.json][这个 JSON 文件]]，可以一键导入两个所需的函数。


导入后需要如下图手动启用函数。
[[file:statics/enable-function.png]]

*** GraphRAG

参照 [[https://microsoft.github.io/graphrag/get_started/][官方的教程]] 初始化数据库。

open-webui 里面默认使用的数据库为 ragtest。

使用其他的大模型，在数据库里面的 ~setting.yaml~ 里面更换就可以了。
* Work flow

the core of this project is blender, open-webui and graphrag.

use docker to set up open-webui.
then you need to import two functions:
- pipe: communicate with graphrag
- actions: extract the JSON from conversation

before you start you need to setup ollama and graphrag.
choose the model and embeddings model you want.

set up the blender, import bvtknodes and json-autoload add-on.
your request is sent to graphrag, here which use ollama as LLM,
provide your database then import the setting.yaml. 
in the setting yaml, the way to call ollama is different in docker.

finally you can ask the question, then press down the action button, preview in the blender.

* Roadmap

- [X] open-webui
  - [X] 导出 open-webui 的 function 的 JSON
  - [X] 如何导入
  - [X] 如何开启
- [X] 调整 open-webui 的 function 的描述，同时导出 JSON
- [X] add how to set up blender and bvtknodes.
- [X] make a setting.yaml for docker
- [X] docker 中 python 虚拟环境的配置
  1. 拉取镜像的时候会不会同步 python 的虚拟环境。
     *不会*
  2. 现在 docker 里面的 graphrag 是通过 conda 还是 uv 启动的虚拟环境
     大概率是 uv，还需要测试
  3. 如何使用 uv 配置虚拟环境
     保存 pyproject.toml and uv.lock
     #+begin_src sh
       apt update
       apt install uv
       uv venv
     #+end_src
     不行，graphrag 实际上只支持 pip 安装
  4. graphrag 推荐的是 3.12 的 python
  5. 最后决定使用 uv pip 来安装，维护 requirement 就可以了。
- [X] 如何更换大模型的教程
- [ ] 最后制作一个网站演示
- [ ] 进行最后的测试
  1. 复习部署的流程，看看教程是否有所遗漏。
  2. 选用 ollama 最强的大模型，尽量参考最好的效果
     什么是最强的大模型
     qwen3:30b/qwen3:235b
     qwen3-embedding:latest
- [ ] 数据库的文本检查
